{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "copy-icon",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/copy-icon.tsx",
      "content": "\"use client\"\nimport React, { ReactNode, useEffect, useRef } from \"react\"\nimport { gsap } from \"gsap\"\nimport { TbCopy } from \"react-icons/tb\"\nimport { MdOutlineHtml } from \"react-icons/md\"\nimport { SiWebflow } from \"react-icons/si\"\nimport { cn } from \"@/lib/utils\" // Importing `cn` for class management\n\ninterface CopyIconProp {\n  iconClass?: string\n  hiddenIconClass?: string\n  startY?: number // Initial Y position before animation\n  enterY?: number // Y position when hovered\n  endY?: number // Y position when hiding\n  duration?: number // Animation duration\n  scaleFactor?: number // Scaling effect on hover\n  mainIcon?: ReactNode\n  hiddenIcon1?: ReactNode\n  hiddenIcon2?: ReactNode\n  onClick?: () => void // Click handler for main icon\n  onHtmlClick?: () => void // Click handler for MdOutlineHtml\n  onWebflowClick?: () => void // Click handler for SiWebflow\n}\n\nconst CopyIcon: React.FC<CopyIconProp> = ({\n  iconClass,\n  hiddenIconClass,\n  startY = 30,\n  enterY = 0,\n  endY,\n  duration = 0.5,\n  scaleFactor = 1.1,\n  onClick,\n  onHtmlClick,\n  onWebflowClick,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const hiddenIconsRef = useRef<HTMLDivElement>(null)\n\n  useEffect(() => {\n    if (!hiddenIconsRef.current) return\n\n    gsap.set(hiddenIconsRef.current.children, {\n      opacity: 0,\n      cursor: \"default\",\n      y: startY,\n      filter: \"blur(5px)\",\n    })\n  }, [startY])\n\n  const handleMouseEnter = (check: boolean) => {\n    const hiddenIcon = document.querySelector(\".hidden-icons\") as HTMLElement\n    // Check if the element is already visible\n    if (\n      check &&\n      hiddenIcon &&\n      window.getComputedStyle(hiddenIcon).opacity === \"0\"\n    )\n      return\n    const tl = gsap.timeline()\n\n    tl.to(\".copy-icon\", {\n      scale: scaleFactor,\n      duration: 0.3,\n      ease: \"power2.out\",\n    })\n      .to(\n        \".hidden-icons\",\n        {\n          opacity: 1,\n          cursor: \"pointer\",\n          y: enterY,\n          filter: \"blur(0px)\",\n          duration,\n          stagger: 0.15,\n          ease: \"power2.out\",\n        },\n        \"+=0.05\"\n      )\n      .to(\n        \".hidden-icon2\",\n        {\n          opacity: 1,\n          cursor: \"pointer\",\n          y: enterY,\n          filter: \"blur(0px)\",\n          duration,\n          stagger: 0.15,\n          ease: \"power2.out\",\n        },\n        \"-=0.4\"\n      )\n  }\n\n  const handleMouseLeave = () => {\n    if (!hiddenIconsRef.current) return\n\n    gsap.to(hiddenIconsRef.current.children, {\n      opacity: 0,\n      cursor: \"default\",\n      y: endY ?? startY + 30,\n      filter: \"blur(5px)\",\n      duration,\n      ease: \"power2.in\",\n    })\n\n    gsap.to(\".copy-icon\", {\n      scale: 1,\n      duration: duration * 0.6,\n    })\n  }\n\n  return (\n    <div\n      className=\"flex flex-col items-center mx-auto\"\n      ref={containerRef}\n      onMouseLeave={handleMouseLeave}\n    >\n      {/* Hidden Icons Container */}\n      <div\n        onMouseEnter={() => handleMouseEnter(true)}\n        ref={hiddenIconsRef}\n        className=\"flex flex-col items-center\"\n      >\n        <MdOutlineHtml\n          className={cn(\n            \"size-12 text-xl p-2 bg-black text-white rounded-full hidden-icon2\",\n            hiddenIconClass\n          )}\n          onClick={() => {\n            const hiddenIcon = document.querySelector(\n              \".hidden-icons\"\n            ) as HTMLElement\n\n            // Ensure the element is visible before executing the function\n            if (\n              hiddenIcon &&\n              window.getComputedStyle(hiddenIcon).opacity === \"0\"\n            )\n              return\n\n            onHtmlClick?.() // Execute only if onWebflowClick is defined\n          }}\n        />\n        <SiWebflow\n          className={cn(\n            \"size-12 my-1.5 p-2.5 bg-black rounded-full hidden-icons text-white\",\n            hiddenIconClass\n          )}\n          onClick={() => {\n            const hiddenIcon = document.querySelector(\n              \".hidden-icons\"\n            ) as HTMLElement\n\n            // Ensure the element is visible before executing the function\n            if (\n              hiddenIcon &&\n              window.getComputedStyle(hiddenIcon).opacity === \"0\"\n            )\n              return\n\n            onWebflowClick?.() // Execute only if onWebflowClick is defined\n          }}\n        />\n      </div>\n\n      {/* Main Icon */}\n      <TbCopy\n        onMouseEnter={() => handleMouseEnter(false)}\n        className={cn(\n          \"size-14 p-3 bg-black text-[#c2ff5d] rounded-full cursor-pointer copy-icon\",\n          iconClass\n        )}\n        onClick={onClick} // Passing the onClick prop\n      />\n    </div>\n  )\n}\n\nexport { CopyIcon }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}