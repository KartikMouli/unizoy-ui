{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "custom-pointer",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/custom-pointer.tsx",
      "content": "\"use client\"\nimport * as React from \"react\"\nimport gsap from \"gsap\"\nimport { cn } from \"../lib/utils\"\nimport { useGSAP } from \"@gsap/react\"\nconst colorPairs = [\n  { primary: \"#FF6B6B\", secondary: \"#4ECDC4\" },\n  { primary: \"#A17FB0\", secondary: \"#5D5FEF\" },\n  { primary: \"#FF9F43\", secondary: \"#FF5E7D\" },\n  { primary: \"#00D2FF\", secondary: \"#3A7BD5\" },\n  { primary: \"#08AEEA\", secondary: \"#2AF598\" },\n]\n\nconst getRandomColorPair = () => {\n  return colorPairs[Math.floor(Math.random() * colorPairs.length)]\n}\n\ninterface CursorIconProps extends React.HTMLAttributes<HTMLDivElement> {}\n\nconst CursorIcon = ({ className, children, ...props }: CursorIconProps) => (\n  <div className={cn(\"mb-4\", className)} {...props}>\n    {children}\n  </div>\n)\n\ninterface NameTagProps extends React.HTMLAttributes<HTMLDivElement> {\n  name?: string\n  src?: string\n}\n\nfunction NameTag({\n  name,\n  src,\n  className,\n  children,\n  ...props\n}: NameTagProps) {\n  if (name || src) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center p-2 rounded-2xl gap-3 mt-4 scale-0\",\n          className\n        )}\n        {...props}\n      >\n        {src && (\n          <img\n            src={src}\n            className=\"h-5 w-5 border rounded-full\"\n            alt=\"Profile\"\n          />\n        )}\n        {name && <p className=\"text-black font-semibold\">{name}</p>}\n      </div>\n    )\n  }\n  return <div {...props}>{children}</div>\n}\n\ninterface CustomCursorProps extends React.HTMLAttributes<HTMLDivElement> {\n  children?: React.ReactNode\n}\n\nconst CustomCursor = ({ children, className, ...props }: CustomCursorProps) => {\n  const [colors, setColors] = React.useState(getRandomColorPair)\n  const [hasCursorIcon, setHasCursorIcon] = React.useState(false)\n  const localRef = React.useRef<HTMLDivElement>(null)\n\n  useGSAP(() => {\n    const prefersDark = window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n    let parent = localRef.current?.parentElement\n    if (!parent || !localRef.current) return\n\n    const mouseEnter = () => {\n      gsap.to(localRef.current, { opacity: 1, duration: 0.1 })\n      gsap.to(\"[data-nametag]\", { scale: 1, duration: 0.3 })\n      parent.style.border = `1px solid ${colors.secondary}`\n    }\n\n    const mouseLeave = () => {\n      gsap.to(localRef.current, { opacity: 0, duration: 0.1 })\n      gsap.to(\"[data-nametag]\", { scale: 0, duration: 0.1 })\n      setColors(getRandomColorPair())\n      parent.style.border = `0.5px solid ${prefersDark?\"#E9E9E8\":\"#262626\"}`\n      // parent.classList.add(\"border\");\n    }\n\n    const mouseMove = (e: MouseEvent) => {\n      const rect = parent.getBoundingClientRect()\n      const x = e.clientX - rect.left\n      const y = e.clientY - rect.top\n      gsap.to(localRef.current, { x, y, duration: 0.1 })\n    }\n\n    parent.addEventListener(\"mouseenter\", mouseEnter)\n    parent.addEventListener(\"mouseleave\", mouseLeave)\n    parent.addEventListener(\"mousemove\", mouseMove)\n\n    return () => {\n      parent.removeEventListener(\"mouseenter\", mouseEnter)\n      parent.removeEventListener(\"mouseleave\", mouseLeave)\n      parent.removeEventListener(\"mousemove\", mouseMove)\n      parent.style.cursor = \"\";\n    }\n  }, [colors])\n\n  // Improved detection of CursorIcon component\n  React.useEffect(() => {\n    // Initialize with false\n    let foundCursorIcon = false;\n    \n    // Enhanced check for CursorIcon components\n    React.Children.forEach(children, (child) => {\n      if (child && React.isValidElement(child)) {\n        // Check if the component is CursorIcon\n        if (\n          typeof child.type === \"function\" &&\n          (child.type.name === \"CursorIcon\" || \n           (child.type as any).displayName === \"CursorIcon\")\n        ) {\n          foundCursorIcon = true;\n        }\n      }\n    });\n    \n    setHasCursorIcon(foundCursorIcon);\n  }, [children]);\n\n  return (\n    <div\n      ref={localRef}\n      className={cn(\"absolute top-0 left-0 opacity-0 pointer-events-none\", className)}\n      {...props}\n    >\n      {/* Only show default cursor when no CursorIcon is found */}\n      {!hasCursorIcon && (\n        <CursorIcon style={{ color: colors.secondary }}>\n          <svg\n            style={{ rotate: \"-70deg\" }}\n            className=\"scale-150\"\n            stroke=\"currentColor\"\n            fill=\"currentColor\"\n            strokeWidth=\"0\"\n            viewBox=\"0 0 16 16\"\n            height=\"20px\"\n            width=\"20px\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path d=\"M14.082 2.182a.5.5 0 0 1 .103.557L8.528 15.467a.5.5 0 0 1-.917-.007L5.57 10.694.803 8.652a.5.5 0 0 1-.006-.916l12.728-5.657a.5.5 0 0 1 .556.103z\"></path>\n          </svg>\n        </CursorIcon>\n      )}\n      {children &&\n        React.Children.map(children, (child) =>\n          React.isValidElement(child)\n            ? React.cloneElement(child, {\n                // @ts-ignore\n                style: {\n                  color: colors.primary,\n                  backgroundColor:\n                     (child.type as any).displayName  !== \"CursorIcon\"\n                      ? colors.secondary\n                      : undefined,\n                } as React.CSSProperties,\n                \"data-nametag\": true,\n              })\n            : child\n        )}\n    </div>\n  )\n}\n\n// Add displayName for better component identification\nCursorIcon.displayName = \"CursorIcon\";\nNameTag.displayName = \"NameTag\";\n\n\nexport { CustomCursor, CursorIcon, NameTag }",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}