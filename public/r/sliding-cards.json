{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "sliding-cards",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/sliding-cards.tsx",
      "content": "\"use client\"\nimport React, { useRef, RefObject, useState, useEffect } from \"react\"\nimport { gsap } from \"gsap\"\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\"\nimport { useGSAP } from \"@gsap/react\"\nimport { cn } from \"../lib/utils\"\n\ninterface ItemsProps {\n  title: string\n  description: string\n  name: string\n  background?: string\n}\n\ninterface SlidingCardsProps {\n  items: ItemsProps[]\n  maxWidth?: number\n  gap?: number\n  backgroundImage?: string\n  triggerStart?: string\n  triggerEnd?: string\n  markers?: boolean // Toggle markers on/off\n  headingText?: string // Optional heading text. If omitted, heading won't render.\n  minHeightValue?: number // Optional minimum height for card content\n  parentClassName?: string\n  parentContentClassName?: string\n  headingClassName?: string\n  contentClassName?: string\n  scrollerRef?: RefObject<HTMLElement>\n}\n\nconst SlidingCards: React.FC<SlidingCardsProps> = ({\n  items,\n  maxWidth = 340,\n\n  gap = 10, // Added gap value (in pixels)\n  backgroundImage = \"https://www.jeton.com/_ipx/f_webp&q_80&w_3400/cms/b7c674ecd0ee69b2eca20443cac6272c550ed396-4000x2667.jpg\",\n  triggerStart = \"top 30%\",\n  triggerEnd = \"+=800\",\n  markers = false,\n  headingText = \"Hear it from our clients\",\n  minHeightValue,\n  parentClassName = \"\",\n  parentContentClassName = \"\",\n  headingClassName = \"\",\n  contentClassName = \"\",\n  scrollerRef,\n}) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const instanceIdRef = useRef<string>(\n    `rotating-text-${Math.random().toString(36).substring(2, 11)}`\n  )\n  const [forceUpdate, setForceUpdate] = useState(false)\n\n  useEffect(() => {\n    console.log(\"from useEffext\")\n\n    if (scrollerRef?.current) {\n      setForceUpdate(!forceUpdate)\n    }\n  }, [scrollerRef?.current])\n  useGSAP(() => {\n    gsap.registerPlugin(ScrollTrigger)\n    if (!containerRef.current) return\n    const existingTrigger = ScrollTrigger.getById(instanceIdRef.current)\n    if (existingTrigger) {\n      existingTrigger.kill()\n    }\n    const cards = containerRef.current.querySelectorAll(\".card\")\n    const cardsArray = Array.from(cards)\n\n    // Get initial heights of each card's inner content wrapper\n    // Alternative: Calculate content-only height by subtracting vertical padding\n    const initialHeights = cardsArray.map((card) => {\n      const content = card.querySelector(\".card-content\") as HTMLElement\n      if (!content) return 0\n      return content.getBoundingClientRect().height\n    })\n    console.log(\"initialHeights\", initialHeights)\n    // const minHeight = Math.min(...initialHeights)\n    const minHeight =\n      minHeightValue !== undefined\n        ? minHeightValue\n        : Math.min(...initialHeights)\n    console.log(\"minHeight\", minHeight)\n\n    // Create a timeline with ScrollTrigger\n    const tl = gsap.timeline({\n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: triggerStart,\n        end: triggerEnd,\n        scrub: true,\n        markers: markers,\n        scroller: scrollerRef?.current ?? window,\n        id: instanceIdRef.current,\n      },\n    })\n\n    // Animate each card's inner content wrapper height and translation, adding a gap.\n    cardsArray.forEach((card, index) => {\n      if (index === 0) return\n      const subset = cardsArray.slice(index)\n      const content = subset[0].querySelector(\".card-content\") as HTMLElement\n      if (!content) return\n\n      // Add the gap to the translation amount\n      tl.to(subset, {\n        y: `+=${initialHeights[index] + gap}`, // gap added here\n        duration: 1, // Increased duration for smoother motion\n        ease: \"sine.out\",\n        stagger: 0.1, // Stagger each subset animation slightly\n      })\n        .to(\n          subset[0],\n          {\n            width: maxWidth,\n            duration: 1.5,\n            ease: \"power2.out\",\n          },\n          \"<\"\n        )\n        .fromTo(\n          content,\n          { height: minHeight },\n          { height: initialHeights[index], duration: 1.5, ease: \"power2.out\" },\n          \"<\"\n        )\n    })\n  }, [forceUpdate])\n\n  return (\n    <div\n      ref={containerRef}\n      style={{\n        backgroundImage: `url(${backgroundImage})`,\n      }}\n      className={cn(\n        \"relative h-[150vh]  flex flex-col justify-start items-center bg-cover bg-center\",\n        parentClassName\n      )}\n    >\n      <h1\n        className={cn(\n          \"text-[4.5rem] text-white my-20 font-semibold\",\n          headingClassName\n        )}\n      >\n        {headingText}\n      </h1>\n      <div\n        className={cn(\n          \"relative flex flex-col justify-center items-center mt-20\",\n          parentContentClassName\n        )}\n      >\n        {items.map((item, index) => {\n          const width = maxWidth - index * 20\n          return (\n            <div\n              key={index}\n              className=\"absolute flex flex-col p-4 m-2 font-grotesk gap-2 card rounded overflow-hidden\"\n              style={{\n                bottom: `${index * -8}px`,\n                width: `${width}px`,\n                zIndex: items.length - index,\n              }}\n            >\n              {/* Modified: Wrap card content inside an inner container and align content to bottom\n                  so that if height is reduced, the bottom remains visible */}\n              <div\n                className=\"card-content overflow-hidden flec flex-col max-h-fit\"\n                style={{\n                  display: \"flex\",\n                  flexDirection: \"column\",\n                  justifyContent: \"flex-end\",\n                }}\n              >\n                <div className={cn(\"child\", contentClassName)}>\n                  <div className=\"flex flex-col\">\n                    <h1 className=\"text-white font-semibold\">{item.title}</h1>\n                    <p className=\"text-white/70\">{item.description}</p>\n                  </div>\n                  <div className=\"flex gap-2 text-white items-center\">\n                    <div\n                      className={`flex justify-center items-center w-9 h-9 rounded-full p-2 ${item.background}`}\n                    >\n                      <p className=\"text-[#360802]\">\n                        {item.name\n                          .split(\" \")\n                          .map((word) => word[0])\n                          .join(\"\")}\n                      </p>\n                    </div>\n                    <p>{item.name}</p>\n                  </div>\n                </div>\n              </div>\n            </div>\n          )\n        })}\n      </div>\n    </div>\n  )\n}\n\nexport { SlidingCards }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}