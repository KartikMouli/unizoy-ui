{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "animated-tooltip",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/animated-tooltip.tsx",
      "content": "\"use client\"\nimport Image from \"next/image\"\nimport React, { useState, useEffect, useRef } from \"react\"\nimport gsap from \"gsap\"\n\nconst AnimatedTooltip = ({\n  items,\n}: {\n  items: {\n    id: number\n    name: string\n    designation: string\n    image: string\n  }[]\n}) => {\n  const [hoveredIndex, setHoveredIndex] = useState<number | null>(null)\n  const previousIndex = useRef<number | null>(null)\n  const tooltipRefs = useRef<{ [key: number]: HTMLDivElement | null }>({})\n  const activeAnimations = useRef<{ [key: number]: gsap.core.Tween | null }>({}) // ✅ Track active animations\n\n  useEffect(() => {\n    if (hoveredIndex !== null && tooltipRefs.current[hoveredIndex]) {\n      const tooltip = tooltipRefs.current[hoveredIndex]\n      tooltip!.style.display = \"flex\" // ✅ Ensure it is visible before animating\n\n      // ✅ If there's an existing animation, kill it (prevents overlapping animations)\n      if (activeAnimations.current[hoveredIndex]) {\n        activeAnimations.current[hoveredIndex]!.kill()\n      }\n\n      // ✅ Store the animation reference\n      activeAnimations.current[hoveredIndex] = gsap.fromTo(\n        tooltip,\n        { opacity: 0, y: 20, scale: 0.6 },\n        {\n          opacity: 1,\n          y: 0,\n          scale: 1,\n          duration: 1.5,\n          ease: \"elastic.out(1, 0.3)\",\n          onComplete: () => {\n            activeAnimations.current[hoveredIndex] = null // ✅ Remove completed animation reference\n          },\n        }\n      )\n    }\n\n    if (previousIndex.current !== null) {\n      const prevTooltip = tooltipRefs.current[previousIndex.current]\n\n      if (prevTooltip) {\n        // ✅ If there's an active fade-in animation, kill it\n        if (activeAnimations.current[previousIndex.current]) {\n          activeAnimations.current[previousIndex.current]!.kill()\n        }\n\n        // ✅ Start fade-out animation\n        activeAnimations.current[previousIndex.current] = gsap.fromTo(\n          prevTooltip,\n          {\n            opacity: 0.8,\n            y: 5,\n            scale: 0.8,\n          },\n          {\n            opacity: 0,\n            rotate: 0,\n            y: 20,\n            scale: 0.6,\n            duration: 0.3,\n            ease: \"none\",\n            onComplete: () => {\n              // ✅ Ensure we only hide if it's still inactive\n              prevTooltip.style.display = \"none\"\n              activeAnimations.current![previousIndex.current!] = null\n            },\n          }\n        )\n      }\n    }\n    previousIndex.current = hoveredIndex\n  }, [hoveredIndex, activeAnimations, tooltipRefs])\n\n  const handleMouseMove = (event: React.MouseEvent<HTMLImageElement>) => {\n    if (hoveredIndex !== null && tooltipRefs.current[hoveredIndex]) {\n      const tooltip = tooltipRefs.current[hoveredIndex]\n      if (tooltip) {\n        const { offsetX } = event.nativeEvent\n        const halfWidth = event.currentTarget.offsetWidth / 2\n        const xOffset = offsetX - halfWidth\n        // const rotate = Math.max(-15, Math.min((xOffset / 100) * 90, 15)); // ✅ Limits extreme rotation\n        const rotate = xOffset === 0 ? 1 : (xOffset / 100) * 90\n\n        gsap.to(tooltip, {\n          x: xOffset,\n          rotation: rotate,\n          duration: 3,\n          ease: \"elastic.out(1.5, 0.2)\",\n        })\n      }\n    }\n  }\n\n  return (\n    <div className=\"flex\">\n      {items.map((item) => (\n        <div\n          className=\"relative group -mr-4 rounded-full\"\n          key={item.id}\n          onMouseEnter={() => setHoveredIndex(item.id)}\n          onMouseLeave={() => setHoveredIndex(null)}\n        >\n          {/* Tooltip */}\n          <div\n            ref={(el) => {\n              if (el) tooltipRefs.current[item.id] = el\n            }}\n            className=\"absolute -top-16 -left-1/2 flex flex-col items-center justify-center rounded-md bg-black z-50 shadow-xl px-4 py-2.5 min-w-32 opacity-0 whitespace-nowrap\"\n            style={{ display: \"none\" }} // ✅ Tooltip starts hidden\n          >\n            <div className=\"absolute inset-x-7 z-30 w-[40%] -bottom-px bg-gradient-to-r from-transparent via-emerald-500 to-transparent h-px\" />\n            <div className=\"absolute left-10 w-[40%] z-30 -bottom-px bg-gradient-to-r from-transparent via-sky-500 to-transparent h-px\" />\n            <div className=\"font-bold text-white relative z-30 text-base text-center mx-auto\">\n              {item.name}\n            </div>\n            <div className=\"text-white text-xs text-center mx-auto\">\n              {item.designation}\n            </div>\n          </div>\n\n          {/* Profile Image */}\n          <Image\n            onMouseMove={handleMouseMove}\n            height={100}\n            width={100}\n            src={item.image}\n            alt={item.name}\n            className=\"object-cover rounded-full h-14 w-14 border-2 border-white transition duration-500\"\n          />\n        </div>\n      ))}\n    </div>\n  )\n}\nexport { AnimatedTooltip }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}