{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "scroll-text-flow",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/scroll-text-flow.tsx",
      "content": "\"use client\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { gsap } from \"gsap\"\nimport { ScrollTrigger } from \"gsap/ScrollTrigger\"\nimport { cn } from \"@/lib/utils\"\nimport { useGSAP } from \"@gsap/react\"\n\ngsap.registerPlugin(ScrollTrigger)\n\ninterface SlideItem {\n  name: string\n  style: string\n}\n\ninterface ScrollTextFlowProps {\n  heading: string\n  subheading: string\n  slideGroups: SlideItem[][] // 2D array: each inner array is a row of slides\n  topGroupCount?: number // number of groups rendered above the text container, default is 2\n  wrapperClassName?: string // extra classes for the main container\n  textWrapperClassName?: string\n  groupClassName?: string // extra classes for each slide group row\n  scrollTriggerStart?: string // scrollTrigger start value, default: \"top 20%\"\n  scrollTriggerEnd?: string // scrollTrigger end value, default: \"+=1500\"\n  useMarkers?: boolean // whether to show markers, default: false\n  scrollerRef?: React.RefObject<HTMLDivElement> // Allow custom scroller\n}\n\nconst ScrollTextFlow: React.FC<ScrollTextFlowProps> = ({\n  heading,\n  subheading,\n  slideGroups,\n  topGroupCount = 2,\n  wrapperClassName = \"\",\n  groupClassName = \"\",\n  textWrapperClassName = \"\",\n  scrollTriggerStart = \"top 20%\",\n  scrollTriggerEnd = \"+=1500\",\n  useMarkers = false,\n  scrollerRef,\n}) => {\n  const containerRef = useRef<HTMLDivElement | null>(null)\n  const wordsContainerRef = useRef<HTMLDivElement | null>(null)\n  // Array to store refs for each slide group row\n  const groupRefs = useRef<(HTMLDivElement | null)[]>([])\n  const instanceIdRef = useRef<string>(\n    `rotating-text-${Math.random().toString(36).substring(2, 11)}`\n  )\n  const [forceUpdate, setForceUpdate] = useState(false)\n\n  useEffect(() => {\n    console.log(\"from useEffext\")\n\n    if (scrollerRef?.current) {\n      setForceUpdate(!forceUpdate)\n    }\n  }, [scrollerRef?.current])\n  // Helper to add each group ref dynamically\n  const addToGroupRefs = (el: HTMLDivElement | null) => {\n    if (el && !groupRefs.current.includes(el)) {\n      groupRefs.current.push(el)\n    }\n  }\n\n  useGSAP(() => {\n    if (!containerRef.current || !wordsContainerRef.current) return\n    const existingTrigger = ScrollTrigger.getById(instanceIdRef.current)\n    const existingTrigger2 = ScrollTrigger.getById(instanceIdRef.current + \"2\")\n    if (existingTrigger && existingTrigger2) {\n      existingTrigger.kill()\n      existingTrigger2.kill()\n    }\n    // Fade-in animation for the text words\n    const words = wordsContainerRef.current.querySelectorAll(\".word\")\n    gsap.set(words, { opacity: 0 })\n    gsap.to(words, {\n      opacity: 1,\n      ease: \"power1.inOut\",\n      stagger: 0.3,\n      scrollTrigger: {\n        trigger: containerRef.current,\n        start: scrollTriggerStart,\n        end: scrollTriggerEnd,\n        scrub: true,\n        markers: useMarkers,\n        pin: true,\n        pinSpacing: true,\n        scroller: scrollerRef?.current ?? window,\n        id: instanceIdRef.current,\n      },\n    })\n\n    // Apply animation for each slide group row\n    groupRefs.current.forEach((group, index) => {\n      const isEven = index % 2 === 0\n      const fromX = isEven ? 50 : 150\n      const toX = isEven ? -200 - index * 50 : 0 + index * 30\n      const scrubSpeed = isEven ? 0.5 : 0.8\n\n      gsap.fromTo(\n        group,\n        { x: fromX },\n        {\n          x: toX,\n          ease: \"power2.out\",\n          scrollTrigger: {\n            trigger: containerRef.current,\n            start: scrollTriggerStart,\n            end: scrollTriggerEnd,\n            scrub: scrubSpeed,\n            markers: useMarkers,\n            scroller: scrollerRef?.current ?? window,\n            id: instanceIdRef.current + \"2\",\n          },\n        }\n      )\n    })\n  }, [\n    slideGroups,\n    scrollTriggerStart,\n    scrollTriggerEnd,\n    useMarkers,\n    scrollerRef,\n    forceUpdate,\n  ])\n\n  const words1 = heading.split(\" \").map((word, index) => (\n    <span key={index} className={cn(\"word\", \"mr-2\", \"inline-block dark:text-white\")}>\n      {word}\n    </span>\n  ))\n  const words2 = subheading.split(\" \").map((word, index) => (\n    <span key={index} className={cn(\"word\", \"mr-2\", \"inline-block dark:text-white\")}>\n      {word}\n    </span>\n  ))\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\"flex justify-center h-screen py-5\", wrapperClassName)}\n    >\n      <div className={cn(\" space-y-3 md:space-y-5 mx-auto text-center w-full\")}>\n        {/* Render slide groups above the text container */}\n        {slideGroups.map((group, idx) =>\n          idx < topGroupCount ? (\n            <div\n              key={idx}\n              ref={addToGroupRefs}\n              className={cn(\n                \"flex justify-center items-center gap-5 md:gap-7 lg:gap-10 flex-nowrap\",\n                groupClassName\n              )}\n            >\n              {group.map((item, i) => (\n                <div\n                  key={i}\n                  className={cn(\n                    \"text-[#232323] w-fit h-fit px-1 font-normal\",\n                    item.style\n                  )}\n                  style={{ whiteSpace: \"nowrap\" }}\n                >\n                  {item.name}\n                </div>\n              ))}\n            </div>\n          ) : null\n        )}\n\n        {/* Words container for fade-in text */}\n        <div\n          ref={wordsContainerRef}\n          className={cn(\n            \"flex justify-center items-center my-5 mb-8 max-w-[60%] mx-auto\",\n            textWrapperClassName\n          )}\n        >\n          <p className={cn(\"text-4xl md:text-5xl font-bold mb-4\")}>\n            {words1} <span className=\"text-lg md:text-xl\">{words2}</span>\n          </p>\n        </div>\n\n        {/* Render slide groups below the text container */}\n        {slideGroups.map((group, idx) =>\n          idx >= topGroupCount ? (\n            <div\n              key={idx}\n              ref={addToGroupRefs}\n              className={cn(\n                \"flex justify-center items-center gap-5 md:gap-7 lg:gap-10 flex-nowrap\",\n                groupClassName\n              )}\n            >\n              {group.map((item, i) => (\n                <div\n                  key={i}\n                  className={cn(\n                    \"text-[#232323] w-fit h-fit px-1 font-normal\",\n                    item.style\n                  )}\n                  style={{ whiteSpace: \"nowrap\" }}\n                >\n                  {item.name}\n                </div>\n              ))}\n            </div>\n          ) : null\n        )}\n      </div>\n    </div>\n  )\n}\n\nexport { ScrollTextFlow }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}