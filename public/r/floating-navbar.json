{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "floating-navbar",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/floating-navbar.tsx",
      "content": "\"use client\";\nimport React, { useRef, useEffect, useState, useCallback, ReactElement, AnchorHTMLAttributes } from \"react\";\nimport gsap from \"gsap\";\nimport { cn } from \"../lib/utils\";\n\n// Types for better code organization\ntype MenuItemProps = {\n  item: string;\n  children?: React.ReactNode;\n};\n\ntype EnhancedMenuItemProps = MenuItemProps & {\n  onMouseEnter?: () => void;\n  isActive?: boolean;\n  isAnimatingOut?: boolean;\n  registerDropdownRef?: (ref: HTMLDivElement | null) => void;\n  animateDropdownIn?: (ref: HTMLDivElement) => void;\n};\n\ntype MenuProps = {\n  children: React.ReactNode;\n};\n\n// The main Menu component that controls all state\nconst Menu = ({ children }: MenuProps) => {\n  const [activeItem, setActiveItem] = useState<string | null>(null);\n  const [animatingOutItem, setAnimatingOutItem] = useState<string | null>(null);\n  const dropdownRefs = useRef<Map<string, HTMLDivElement>>(new Map());\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  \n  // Clear any existing timeouts when component unmounts\n  useEffect(() => {\n    return () => {\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, []);\n\n  // Handle mouse enter on a menu item\n  const handleItemMouseEnter = useCallback((item: string) => {\n    // Clear any ongoing animations/timeouts\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n    \n    // If we're animating out the same item that's being hovered,\n    // just cancel the animation out\n    if (animatingOutItem === item) {\n      setAnimatingOutItem(null);\n    }\n    \n    // If we're hovering a different item, animate the current one out first\n    if (activeItem && activeItem !== item && animatingOutItem !== activeItem) {\n      const prevDropdown = dropdownRefs.current.get(activeItem);\n      \n      if (prevDropdown) {\n        // Animate out the previously active dropdown\n        gsap.to(prevDropdown, {\n          opacity: 0,\n          scale: 0.85,\n          y: 10,\n          duration: 0.3,\n          ease: \"power2.out\",\n          onComplete: () => {\n            // After animating out, set the new active item\n            setActiveItem(item);\n            setAnimatingOutItem(null);\n          }\n        });\n        setAnimatingOutItem(activeItem);\n        return;\n      }\n    }\n    \n    // Set the new active item directly if no animation needed\n    setActiveItem(item);\n  }, [activeItem, animatingOutItem]);\n\n  // Handle mouse leave on the entire menu\n  const handleMenuMouseLeave = useCallback(() => {\n    if (activeItem) {\n      const dropdown = dropdownRefs.current.get(activeItem);\n      \n      if (dropdown) {\n        // Animate out the active dropdown\n        gsap.to(dropdown, {\n          opacity: 0,\n          scale: 0.85,\n          y: 10,\n          duration: 0.4,\n          ease: \"power3.out\",\n          onComplete: () => {\n            setActiveItem(null);\n            setAnimatingOutItem(null);\n          }\n        });\n        setAnimatingOutItem(activeItem);\n      } else {\n        // Fallback if ref is not available\n        timeoutRef.current = setTimeout(() => {\n          setActiveItem(null);\n          setAnimatingOutItem(null);\n        }, 400);\n      }\n    }\n  }, [activeItem]);\n  \n  // Register a dropdown ref\n  const registerDropdownRef = useCallback((item: string, ref: HTMLDivElement | null) => {\n    if (ref) {\n      dropdownRefs.current.set(item, ref);\n    } else {\n      dropdownRefs.current.delete(item);\n    }\n  }, []);\n\n  // Animate in a dropdown when it becomes active\n  const animateDropdownIn = useCallback((ref: HTMLDivElement) => {\n    gsap.set(ref, { opacity: 0, scale: 0.85, y: 10 });\n    gsap.to(ref, {\n      opacity: 1,\n      scale: 1,\n      y: 0,\n      duration: 0.5,\n      ease: \"back.out(1.7)\",\n    });\n  }, []);\n\n  // Clone children to add necessary props\n  const enhancedChildren = React.Children.map(children, (child) => {\n    if (React.isValidElement<MenuItemProps>(child)) {\n      const item = child.props.item;\n      \n      // Only pass valid props that are defined in the child component's prop type\n      const enhancedProps: EnhancedMenuItemProps = {\n        ...child.props,\n        onMouseEnter: () => handleItemMouseEnter(item),\n        isActive: activeItem === item,\n        isAnimatingOut: animatingOutItem === item,\n        registerDropdownRef: (ref: HTMLDivElement | null) => \n          registerDropdownRef(item, ref),\n        animateDropdownIn\n      };\n      \n      return React.cloneElement(child, enhancedProps);\n    }\n    return child;\n  });\n\n  return (\n    <nav\n      onMouseLeave={handleMenuMouseLeave}\n      className=\"relative rounded-full border border-transparent dark:bg-black dark:border-white/[0.2] bg-white shadow-input flex justify-center space-x-4 px-8 py-6\"\n    >\n      {enhancedChildren}\n    </nav>\n  );\n};\n\n// MenuItem is now a controlled component that receives all it needs from Menu\nconst MenuItem = React.forwardRef<HTMLDivElement, EnhancedMenuItemProps>(({\n  item,\n  children,\n  onMouseEnter,\n  isActive = false,\n  isAnimatingOut = false,\n  registerDropdownRef,\n  animateDropdownIn\n}, _ref) => {\n  const menuItemRef = useRef<HTMLParagraphElement>(null);\n  const dropdownRef = useRef<HTMLDivElement>(null);\n  \n  // Register the dropdown ref when it's created\n  useEffect(() => {\n    if (dropdownRef.current && registerDropdownRef) {\n      registerDropdownRef(dropdownRef.current);\n      \n      // Return cleanup function\n      return () => {\n        registerDropdownRef(null);\n      };\n    }\n  }, [registerDropdownRef]);\n  \n  // Animate dropdown in when it becomes active\n  useEffect(() => {\n    if (isActive && dropdownRef.current && animateDropdownIn && !isAnimatingOut) {\n      animateDropdownIn(dropdownRef.current);\n    }\n  }, [isActive, animateDropdownIn, isAnimatingOut]);\n\n  return (\n    <div onMouseEnter={onMouseEnter} className=\"relative\">\n      <p\n        ref={menuItemRef}\n        className=\"cursor-pointer text-black hover:opacity-[0.9] dark:text-white\"\n      >\n        {item}\n      </p>\n      \n      {/* Show dropdown when active OR when animating out */}\n      {(isActive || isAnimatingOut) && (\n        <div className=\"absolute top-[calc(100%_+_1.2rem)] left-1/2 transform -translate-x-1/2 pt-4\">\n          <div\n            ref={dropdownRef}\n            className=\"bg-white dark:bg-black backdrop-blur-sm rounded-2xl overflow-hidden border border-black/[0.2] dark:border-white/[0.2] shadow-xl\"\n          >\n            <div className=\"w-max h-full p-4\">\n              {children}\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n});\n\nMenuItem.displayName = \"MenuItem\";\n\n// Unchanged components\nconst ProductItem = ({\n  title,\n  description,\n  href,\n  src,\n}: {\n  title: string;\n  description: string;\n  href: string;\n  src: string;\n}) => {\n  return (\n    <a href={href} className=\"flex space-x-2\">\n      <img\n        src={src}\n        width={140}\n        height={70}\n        alt={title}\n        className=\"shrink-0 rounded-md shadow-2xl\"\n      />\n      <div>\n        <h4 className=\"text-base md:text-xl font-bold mb-1 text-black dark:text-white\">\n          {title}\n        </h4>\n        <p className=\"text-neutral-700 text-xs md:text-sm max-w-[10rem] dark:text-neutral-300\">\n          {description}\n        </p>\n      </div>\n    </a>\n  );\n};\n\ninterface LinkProps extends AnchorHTMLAttributes<HTMLAnchorElement> {\n  children: ReactElement | string;\n}\nconst HoveredLink = ({ children, className = \"\", ...rest }: LinkProps) => {\n  return (\n    <a\n      {...rest}\n      className={cn(\"text-neutral-700 dark:text-neutral-200 hover:text-black\",className)}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport { Menu, MenuItem, ProductItem, HoveredLink };",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}