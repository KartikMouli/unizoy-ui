{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "text-hover-effect",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/text-hover-effect.tsx",
      "content": "\"use client\"\nimport React, { useRef, useState, useEffect } from \"react\"\nimport { useGSAP } from \"@gsap/react\"\nimport gsap from \"gsap\"\n\nexport const TextHoverEffect = ({\n  text,\n  duration,\n  fontSize = 56, // Default to roughly Tailwind's `text-7xl`\n}: {\n  text: string\n  duration?: number\n  fontSize?: number\n}) => {\n  const svgRef = useRef<SVGSVGElement>(null)\n  const maskGradientRef = useRef(null)\n  const animatedTextRef = useRef(null)\n  const [cursor, setCursor] = useState({ x: 0, y: 0 })\n  const [hovered, setHovered] = useState(false)\n  const [maskPosition, setMaskPosition] = useState({ cx: \"50%\", cy: \"50%\" })\n\n  useGSAP(\n    () => {\n      gsap.fromTo(\n        animatedTextRef.current,\n        { strokeDashoffset: 1000, strokeDasharray: 1000 },\n        {\n          strokeDashoffset: 0,\n          strokeDasharray: 1000,\n          duration: 4,\n          ease: \"power2.inOut\",\n        }\n      )\n    },\n    { scope: svgRef }\n  )\n\n  // Update cursor position based on mouse or touch coordinates\n  const updateCursorPosition = (x: number, y: number) => {\n    if (svgRef.current && x !== null && y !== null) {\n      const svgRect = svgRef.current.getBoundingClientRect()\n      const cxPercentage = ((x - svgRect.left) / svgRect.width) * 100\n      const cyPercentage = ((y - svgRect.top) / svgRect.height) * 100\n\n      const newPosition = {\n        cx: `${cxPercentage}%`,\n        cy: `${cyPercentage}%`,\n      }\n\n      setMaskPosition(newPosition)\n\n      gsap.to(maskGradientRef.current, {\n        attr: newPosition,\n        duration: duration ?? 0,\n        ease: \"power2.out\",\n      })\n    }\n  }\n\n  useEffect(() => {\n    updateCursorPosition(cursor.x, cursor.y)\n  }, [cursor, duration])\n\n  // Mouse event handlers\n  const handleMouseEnter = () => setHovered(true)\n  const handleMouseLeave = () => setHovered(false)\n  const handleMouseMove = (e: React.MouseEvent) => {\n    setCursor({ x: e.clientX, y: e.clientY })\n  }\n\n  // Touch event handlers\n  const handleTouchStart = (e: React.TouchEvent) => {\n    e.preventDefault() // Prevent default behavior like scrolling\n    setHovered(true)\n    if (e.touches.length > 0) {\n      const touch = e.touches[0]\n      setCursor({ x: touch.clientX, y: touch.clientY })\n    }\n  }\n\n  const handleTouchMove = (e: React.TouchEvent) => {\n    e.preventDefault()\n    if (e.touches.length > 0) {\n      const touch = e.touches[0]\n      setCursor({ x: touch.clientX, y: touch.clientY })\n    }\n  }\n\n  const handleTouchEnd = (e: React.TouchEvent) => {\n    e.preventDefault()\n    setHovered(false)\n  }\n\n  return (\n    <svg\n      ref={svgRef}\n      width=\"100%\"\n      height=\"100%\"\n      viewBox=\"0 0 300 100\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      // Mouse events\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onMouseMove={handleMouseMove}\n      // Touch events\n      onTouchStart={handleTouchStart}\n      onTouchMove={handleTouchMove}\n      onTouchEnd={handleTouchEnd}\n      onTouchCancel={handleTouchEnd}\n      className=\"select-none\"\n    >\n      <defs>\n        <linearGradient\n          id=\"textGradient\"\n          gradientUnits=\"userSpaceOnUse\"\n          cx=\"50%\"\n          cy=\"50%\"\n          r=\"20%\"\n        >\n          {hovered && (\n            <>\n              <stop offset=\"0%\" stopColor=\"#eab308\" />\n              <stop offset=\"25%\" stopColor=\"#ef4444\" />\n              <stop offset=\"50%\" stopColor=\"#3b82f6\" />\n              <stop offset=\"75%\" stopColor=\"#06b6d4\" />\n              <stop offset=\"100%\" stopColor=\"#8b5cf6\" />\n            </>\n          )}\n        </linearGradient>\n        <radialGradient\n          id=\"revealMask\"\n          ref={maskGradientRef}\n          gradientUnits=\"userSpaceOnUse\"\n          r=\"25%\"\n          cx={maskPosition.cx}\n          cy={maskPosition.cy}\n        >\n          <stop offset=\"0%\" stopColor=\"white\" />\n          <stop offset=\"100%\" stopColor=\"black\" />\n        </radialGradient>\n        <mask id=\"textMask\">\n          <rect\n            x=\"0\"\n            y=\"0\"\n            width=\"100%\"\n            height=\"100%\"\n            fill=\"url(#revealMask)\"\n          />\n        </mask>\n      </defs>\n\n      {/* 3 text layers with shared style */}\n      {[0, 1, 2].map((_, idx) => (\n        <text\n          key={idx}\n          ref={idx === 1 ? animatedTextRef : undefined}\n          x=\"50%\"\n          y=\"50%\"\n          textAnchor=\"middle\"\n          dominantBaseline=\"middle\"\n          strokeWidth=\"0.3\"\n          className={`fill-transparent font-[helvetica] font-bold ${\n            idx === 0\n              ? \"stroke-neutral-200 dark:stroke-neutral-800\"\n              : idx === 1\n              ? \"stroke-neutral-200 dark:stroke-neutral-800\"\n              : \"\"\n          }`}\n          stroke={idx === 2 ? \"url(#textGradient)\" : undefined}\n          mask={idx === 2 ? \"url(#textMask)\" : undefined}\n          style={{\n            fontSize,\n            opacity: idx === 0 && !hovered ? 0 : idx === 0 ? 0.7 : 1,\n          }}\n        >\n          {text}\n        </text>\n      ))}\n    </svg>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}