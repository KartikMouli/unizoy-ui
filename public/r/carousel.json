{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "carousel",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/carousel.tsx",
      "content": "\"use client\"\nimport { FaArrowRightLong } from \"react-icons/fa6\"\nimport { useState, useRef, useId, useEffect } from \"react\"\nimport { gsap } from \"gsap\"\nimport Link from \"next/link\"\n\ninterface CarouselProps {\n  slides: SlideData[]\n}\ninterface CarouselControlProps {\n  type: string\n  title: string\n  handleClick: () => void\n}\ninterface SlideData {\n  title: string\n  button: string\n  src: string\n  link: string\n}\n\ninterface SlideProps {\n  slide: SlideData\n  index: number\n  current: number\n  handleSlideClick: (index: number) => void\n  parentRef: React.RefObject<HTMLUListElement>\n}\n\nconst Carousel = ({ slides }: CarouselProps) => {\n  const [current, setCurrent] = useState(0)\n  const parentRef = useRef<HTMLUListElement>(null)\n\n  const handlePreviousClick = () => {\n    const previous = current - 1\n    const newCurrent = previous < 0 ? slides.length - 1 : previous\n\n    const parent = parentRef.current?.childNodes\n    if (!parent) return\n\n    const tl = gsap.timeline()\n    const prevSlide = parent[newCurrent].childNodes[0] as Element\n\n    // Animate active slide: 0.4 sec from { scale: 0.98, rotateX: 8 } to { scale: 1, rotateX: 0 }\n    tl.fromTo(\n      prevSlide,\n      { scale: 0.98, rotateX: 8 },\n      { scale: 1, rotateX: 0, duration: 0.4, ease: \"power2.out\" }\n    )\n\n    // Animate the translation of the slides container over 0.3 sec\n    const ulEl = parentRef.current\n    if (ulEl) {\n      gsap.to(ulEl, {\n        duration: 0.3,\n        x: `-${newCurrent * (100 / slides.length)}%`,\n        ease: \"power2.out\",\n      })\n    }\n\n    // Animate remaining slides to maintain their state\n    for (let i = 0; i < parent.length; i++) {\n      if (i !== newCurrent) {\n        const slideElement = (parent[i] as Element).childNodes[0] as Element\n        gsap.to(slideElement, {\n          scale: 0.98,\n          rotateX: 8,\n          duration: 0.4,\n          ease: \"power2.out\",\n        })\n      }\n    }\n\n    setCurrent(newCurrent)\n  }\n\n  const handleNextClick = () => {\n    const next = current + 1\n    const newCurrent = next === slides.length ? 0 : next\n\n    const parent = parentRef.current?.childNodes\n    if (!parent) return\n\n    const tl = gsap.timeline()\n    const nextSlide = parent[newCurrent].childNodes[0] as Element\n\n    // Animate active slide: 0.3 sec tween then hold for 0.7 sec\n    tl.fromTo(\n      nextSlide,\n      { scale: 0.98, rotateX: 8 },\n      { scale: 1, rotateX: 0, duration: 0.4, ease: \"power2.out\" }\n    )\n    // .to(nextSlide, { duration: 0.4 });\n\n    // Animate the translation of the slides container over 1 sec\n    const ulEl = parentRef.current\n    if (ulEl) {\n      gsap.to(ulEl, {\n        duration: 0.3,\n        x: `-${newCurrent * (100 / slides.length)}%`,\n        ease: \"power2.out\",\n      })\n    }\n\n    // Animate remaining slides to maintain their state\n    for (let i = 0; i < parent.length; i++) {\n      if (i !== newCurrent) {\n        const slideElement = (parent[i] as Element).childNodes[0] as Element\n        gsap.to(slideElement, {\n          scale: 0.98,\n          rotateX: 8,\n          duration: 0.4,\n          ease: \"power2.out\",\n        })\n      }\n    }\n\n    setCurrent(newCurrent)\n  }\n\n  const handleSlideClick = (index: number) => {\n    if (current !== index) {\n      setCurrent(index)\n    }\n  }\n\n  const id = useId()\n\n  return (\n    <div\n      className=\"relative w-[70vmin] h-[70vmin] mx-auto\"\n      aria-labelledby={`carousel-heading-${id}`}\n    >\n      <ul\n        ref={parentRef}\n        className=\"absolute flex mx-[-4vmin] transition-transform duration-1000 ease-in-out\"\n        style={{\n          transform: `translateX(-${current * (100 / slides.length)}%)`,\n        }}\n      >\n        {slides.map((slide, index) => (\n          <Slide\n            key={index}\n            slide={slide}\n            index={index}\n            current={current}\n            handleSlideClick={handleSlideClick}\n            parentRef={parentRef}\n          />\n        ))}\n      </ul>\n\n      <div className=\"absolute flex justify-center w-full top-[calc(100%+1rem)]\">\n        <CarouselControl\n          type=\"previous\"\n          title=\"Go to previous slide\"\n          handleClick={handlePreviousClick}\n        />\n\n        <CarouselControl\n          type=\"next\"\n          title=\"Go to next slide\"\n          handleClick={handleNextClick}\n        />\n      </div>\n    </div>\n  )\n}\nexport { Carousel }\n\nconst Slide = ({\n  slide,\n  index,\n  current,\n  handleSlideClick,\n  parentRef,\n}: SlideProps) => {\n  const slideRef = useRef<HTMLLIElement>(null)\n  const xRef = useRef(0)\n  const yRef = useRef(0)\n  const imageRef = useRef<HTMLImageElement>(null)\n  const divRef = useRef<HTMLDivElement>(null)\n  const divRef2 = useRef<HTMLDivElement>(null)\n\n  const { src, button, title, link } = slide\n\n  useEffect(() => {\n    if (current !== index) {\n      gsap.to(slideRef.current, {\n        scale: 0.98,\n        rotateX: 8,\n        duration: 0.5,\n        ease: \"power2.out\",\n      })\n      gsap.to(imageRef.current, {\n        opacity: 0.5,\n        duration: 0.6,\n      })\n    }\n  }, [current, index])\n\n  const handleMouseMove = (event: React.MouseEvent) => {\n    if (current !== index) return\n    const el = slideRef.current\n    const img = divRef2.current\n    if (!el) return\n\n    const rect = el.getBoundingClientRect()\n    const x = event.clientX - (rect.left + rect.width / 2)\n    const y = event.clientY - (rect.top + rect.height / 2)\n\n    xRef.current = x / 20\n    yRef.current = y / 20\n\n    gsap.to(img, {\n      x: xRef.current,\n      y: yRef.current,\n      duration: 0.2,\n      ease: \"power2.out\",\n    })\n  }\n\n  const handleMouseLeave = () => {\n    const img = divRef2.current\n    if (!img) return\n    gsap.to(img, {\n      x: 0,\n      y: 0,\n      duration: 0.3,\n      ease: \"power2.out\",\n    })\n  }\n\n  return (\n    <div className=\"[perspective:1200px] [transform-style:preserve-3d]\">\n      <li\n        ref={slideRef}\n        className=\"flex flex-1 flex-col items-center justify-center relative text-center text-white opacity-100 transition-all duration-300 ease-in-out w-[70vmin] h-[70vmin] mx-[4vmin] z-10\"\n        onClick={() => handleSlideClick(index)}\n        onMouseMove={handleMouseMove}\n        onMouseLeave={handleMouseLeave}\n      >\n        <div\n          ref={divRef2}\n          className=\"absolute top-0 left-0 w-full h-full bg-[#1D1F2F] rounded-[1%]  transition-all duration-150 ease-out\"\n        >\n          <img\n            ref={imageRef}\n            className=\"absolute h-full w-full inset-0 rounded-[1%]  object-cover opacity-100 transition-opacity duration-600 ease-in-out\"\n            alt={title}\n            src={src}\n            loading=\"eager\"\n            decoding=\"sync\"\n          />\n          {current === index && (\n            <div\n              ref={divRef}\n              className=\"absolute inset-0 bg-black/30 transition-all duration-1000\"\n            />\n          )}\n        </div>\n\n        <article\n          className={`relative p-[4vmin] transition-opacity duration-1000 ease-in-out ${\n            current === index ? \"opacity-100 visible\" : \"opacity-0 invisible\"\n          }`}\n        >\n          <h2 className=\"text-lg md:text-2xl lg:text-4xl font-semibold relative\">\n            {title}\n          </h2>\n          <div className=\"flex justify-center\">\n            <Link href={link}>\n              <button className=\"mt-6 px-4 py-2 w-fit mx-auto sm:text-sm text-black bg-white h-12 border border-transparent text-xs flex justify-center items-center rounded-2xl hover:shadow-lg transition duration-200 shadow-[0px_2px_3px_-1px_rgba(0,0,0,0.1),0px_1px_0px_0px_rgba(25,28,33,0.02),0px_0px_0px_1px_rgba(25,28,33,0.08)]\">\n                {button}\n              </button>\n            </Link>\n          </div>\n        </article>\n      </li>\n    </div>\n  )\n}\n\nconst CarouselControl = ({\n  type,\n  title,\n  handleClick,\n}: CarouselControlProps) => {\n  return (\n    <button\n      className={`w-10 h-10 flex items-center mx-2 justify-center bg-neutral-200 dark:bg-neutral-800 border-3 border-transparent rounded-full focus:border-[#6D64F7] focus:outline-none hover:-translate-y-0.5 active:translate-y-0.5 transition duration-200 ${\n        type === \"previous\" ? \"rotate-180\" : \"\"\n      }`}\n      title={title}\n      onClick={handleClick}\n    >\n      <FaArrowRightLong className=\"text-neutral-600 dark:text-neutral-200\" />\n    </button>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}