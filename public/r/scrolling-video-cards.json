{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "scrolling-video-cards",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/scrolling-video-cards.tsx",
      "content": "\"use client\";\n\nimport React, { useRef ,RefObject, useState, useEffect} from 'react'\nimport gsap from \"gsap\";\nimport ScrollTrigger from \"gsap/ScrollTrigger\";\nimport { cn } from '@/lib/utils';\nimport { FaArrowRightLong } from \"react-icons/fa6\";\nimport { useGSAP } from '@gsap/react';\n\ngsap.registerPlugin(ScrollTrigger);\n\ninterface VideoItem {\n  title: string;\n  description: string;\n  tag: string;\n  link: string;\n}\n\ninterface ScrollingVideoCardsProps {\n  videoItems: VideoItem[];\n  startXPercentage?: number;\n  endXPercentage?: number;\n  scrollTriggerStart?: string;\n  scrollTriggerEnd?: string;\n  scrubSpeed?: boolean | number;\n  useMarkers?: boolean;\n  gap?: number;\n  descriptionTextClassName?: string;\n  videoCardContainerClassName?: string;\n  containerClassName?: string;\n  scrollerRef?: RefObject<HTMLElement>\n}\n\nconst ScrollingVideoCards = ({\n  videoItems,\n  startXPercentage = 100,\n  endXPercentage = 0,\n  scrollTriggerStart = \"top center\",\n  scrollTriggerEnd = \"bottom top\",\n  scrubSpeed = true,\n  useMarkers = false,\n  gap = 20,\n  descriptionTextClassName,\n  videoCardContainerClassName,\n  containerClassName=\"bg-black text-white h-screen\",\n  scrollerRef\n}: ScrollingVideoCardsProps) => {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const groupRef = useRef<HTMLDivElement>(null);\n  const videoRefs = useRef<HTMLVideoElement[]>([]);\n  const textRefs = useRef<HTMLDivElement[]>([]);\n  const cardRefs = useRef<HTMLDivElement[]>([]);\n  const instanceIdRef = useRef<string>(\n    `rotating-text-${Math.random().toString(36).substring(2, 11)}`\n  )\n  const [forceUpdate, setForceUpdate] = useState(false)\n\n  useEffect(() => {\n    console.log(\"from useEffext\");\n    \n    if (scrollerRef?.current) {\n      setForceUpdate(!forceUpdate)\n    }\n  }, [])\n  const addToVideoRefs = (el: HTMLVideoElement) => {\n    if (el && !videoRefs.current.includes(el)) {\n      videoRefs.current.push(el);\n    }\n  };\n\n  const addToTextRefs = (el: HTMLDivElement) => {\n    if (el && !textRefs.current.includes(el)) {\n      textRefs.current.push(el);\n    }\n  };\n\n  const addToCardRefs = (el: HTMLDivElement) => {\n    if (el && !cardRefs.current.includes(el)) {\n      cardRefs.current.push(el);\n    }\n  };\n\n  useGSAP(() => {\n    if (groupRef.current && containerRef.current) {\n      const existingTrigger = ScrollTrigger.getById(instanceIdRef.current)\n    \n      if (existingTrigger ) {\n      existingTrigger.kill()\n     \n      }\n      const tl = gsap.timeline({\n        scrollTrigger: {\n          trigger: containerRef.current,\n          start: scrollTriggerStart,\n          end: scrollTriggerEnd,\n          scrub: scrubSpeed,\n          markers: useMarkers,\n          pin: true,\n          scroller: scrollerRef?.current ?? window,\n          id:instanceIdRef.current\n        },\n        onUpdate: function () {\n          const progress = this.progress();\n          const numVideos = videoRefs.current.length;\n          const activeIndex = Math.floor(progress * numVideos)\n          const CardWidth = cardRefs.current[activeIndex].getBoundingClientRect().width;\n\n          let translationStart,translationEnd;\n          if (window.innerWidth < 640) {\n            translationStart = CardWidth + gap - 100; // Mobile (smaller threshold)\n            translationEnd   =  2*(CardWidth + gap) - 100;\n          } else if (window.innerWidth < 1024) {\n            translationStart = CardWidth + gap - 200; // Tablet (medium threshold)\n            translationEnd =  2*(CardWidth + gap) - 200; // Tablet (medium threshold)\n          } else {\n            translationStart = CardWidth + gap - 200; // Desktop (default)\n            translationEnd = 2*(CardWidth + gap) - 200 ; // Desktop (default)\n          }\n\n          videoRefs.current.forEach((video, index) => {\n            // Calculate each card's distance percentage from the right edge\n            const rect = cardRefs.current[index].getBoundingClientRect();\n            const percentFromRight = window.innerWidth - rect.right;\n            const textHeight = textRefs.current[index]?.offsetHeight || 0;\n            const translateY = textHeight + 10;\n            // Calculate the percentage difference before setting the card distances\n            // const traslation = CardWidth + gap;\n            // Only apply y translation if active and the percent is between 10 and 30%\n            if (percentFromRight >= translationStart && percentFromRight < translationEnd ) {\n              gsap.to(video, { y: -translateY, duration: 0.4, ease: \"power2.out\", overwrite: \"auto\" });\n              video.play();\n              video.style.filter = \"brightness(100%)\";\n            } else {\n              gsap.to(video, { y: 0, duration: 0.4, ease: \"power2.out\", overwrite: \"auto\" });\n              video.pause();\n              video.currentTime = 0;\n              video.style.filter = \"brightness(50%)\"; \n            }\n          });\n\n        },\n      });\n\n      tl.fromTo(\n        groupRef.current,\n        { xPercent: startXPercentage },\n        { xPercent: endXPercentage, ease: \"none\" }\n      );\n    }\n  }, [startXPercentage, endXPercentage, scrollTriggerStart, scrollTriggerEnd, scrubSpeed, useMarkers, forceUpdate]);\n\n\n  return (\n    <div ref={containerRef} className={cn(\"p-10 space-y-20 overflow-x-hidden flex justify-center items-censter \",containerClassName)}>\n      <div ref={groupRef} style={{ gap: `${gap}px` }} className={`flex justify-center items-center`}>\n        {videoItems.map((video, i) => (\n          <div key={i} ref={addToCardRefs} className={cn(\"flex flex-col items-center relative \",videoCardContainerClassName)}>\n            <video\n              ref={addToVideoRefs}\n              className=\"min-w-[10rem] sm:min-w-[14rem] md:min-w-[17rem] lg:min-w-[20rem] h-[20rem] sm:h-[24rem] md:h-[26rem] lg:h-[28rem] bg-black object-cover rounded-3xl shadow-lg\"\n              src={video.link}\n              muted\n              loop\n              playsInline\n            />\n            <div ref={addToTextRefs} className=\"absolute bottom-0 left-3 -z-10 text-start\">\n              <h3 className=\" text-[0.7rem] font-bold\">{video.title.toUpperCase()}</h3>\n              <p className={cn(\" text-lg md:text-[1.375rem] text-gray-200 font-semibold\", descriptionTextClassName)}>\n                {video.description}\n              </p>\n              <p className=\"text-xs text-gray-400\">{video.tag}</p>\n            </div>\n            {/* Distance Display */}\n            {/* <div className=\"mt-2 text-sm text-white\">\n              {cardDistances[i] !== undefined &&\n              `Distance from right: ${((cardDistances[i] / window.innerWidth) * 100).toFixed(0)}% (${cardDistances[i].toFixed(3)}px)`}\n            </div> */}\n          </div>\n        ))}\n\n        {/* See More Card */}\n        <div ref={addToCardRefs} className=\"relative flex flex-col items-center\">\n          <div className=\"relative flex items-center gap-2 justify-center min-w-[10rem] sm:min-w-[14rem] md:min-w-[17rem] lg:min-w-[20rem] h-[20rem] sm:h-[24rem] md:h-[26rem] lg:h-[28rem] bg-[#202020] rounded-3xl shadow-lg cursor-pointer overflow-hidden group\">\n            {/* Expanding Background Effect */}\n            <div className=\"absolute left-[-100px] md:left-[-130px] top-[-10px] md:top-0 lg:top-2 inset-0 bg-[#bb70ad] scale-0 rounded-full transition-all duration-500 group-hover:scale-150 group-hover:min-w-[17rem] group-hover:h-[26rem] \"></div>\n            {/* Arrow and Text */}\n            <div className=\"relative flex items-center gap-2 z-10\">\n              <p className=\"bg-[#bb70ad] text-sm p-1 md:p-2 rounded-full text-black\">\n                <FaArrowRightLong />\n              </p>\n              <p className=\"text-white text-[0.7rem] md:text-sm font-semibold transition-colors duration-500 group-hover:text-black\">\n                See All Case Studies\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport {ScrollingVideoCards};",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}