{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "button",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/button.tsx",
      "content": "\"use client\"\nimport { cva, VariantProps } from \"class-variance-authority\";\nimport {\n  ButtonHTMLAttributes,\n  forwardRef,\n  useEffect,\n  useRef,\n  useState,\n} from \"react\";\nimport { cn } from \"../lib/utils\";\nimport gsap from \"gsap\";\nimport { useGSAP } from \"@gsap/react\";\n\nconst buttonVariants = cva(\n  `flex justify-center items-center relative z-10 hover:text-black\n   px-4 py-2 sm:px-6 sm:py-3 bg-black text-white font-bold border-2 rounded-2xl sm:rounded-3xl overflow-hidden `,\n  {\n    variants: {\n     variant: {\n        pink: \"border-pink-400\",\n        yellow: \"border-yellow-400\",\n        blue: \"border-blue-400\",\n        red: \"border-red-400\",\n        purple: \"border-purple-400\",\n        green: \"border-green-400\",\n        teal: \"border-teal-400\",\n        orange: \"border-orange-400\",\n        indigo: \"border-indigo-400\",\n        emerald: \"border-emerald-400\",\n        amber: \"border-amber-400\",\n        cyan: \"border-cyan-400\",\n        lime: \"border-lime-400\",\n        fuchsia: \"border-fuchsia-400\",\n        rose: \"border-rose-400\",\n        sky: \"border-sky-400\",\n        sunset: \"border-orange-400 border-t-yellow-300 border-r-red-400 border-b-purple-500 border-l-pink-400\",\n        ocean: \"border-blue-500 border-t-cyan-400 border-r-teal-500 border-b-blue-600 border-l-indigo-500\",\n        forest: \"border-green-500 border-t-emerald-400 border-r-lime-500 border-b-green-600 border-l-teal-500\",\n        galaxy: \"border-purple-500 border-t-indigo-400 border-r-violet-500 border-b-purple-600 border-l-fuchsia-500\",\n        neon: \"border-lime-400 border-opacity-90 shadow-sm shadow-lime-400\",\n        ember: \"border-red-500 border-t-orange-400 border-r-amber-500 border-b-red-600 border-l-rose-500\",\n        arctic: \"border-cyan-400 border-t-sky-300 border-r-blue-400 border-b-cyan-500 border-l-teal-400\",\n        candy: \"border-pink-400 border-t-fuchsia-300 border-r-purple-400 border-b-pink-500 border-l-rose-400\",\n      },\n      intent: {\n        small: \"text-sm sm:text-base\",\n        medium: \"text-base sm:text-lg\",\n        large: \"text-lg sm:text-xl\",\n      },\n    },\n    defaultVariants: {\n      intent: \"small\",\n    },\n  }\n);\nconst variantToColorClass = {\n  pink: \"bg-pink-400\",\n  yellow: \"bg-yellow-400\",\n  blue: \"bg-blue-400\",\n  red: \"bg-red-400\",\n  purple: \"bg-purple-400\",\n  green: \"bg-green-400\",\n  teal: \"bg-teal-400\",\n  orange: \"bg-orange-400\",\n  indigo: \"bg-indigo-400\",\n  emerald: \"bg-emerald-400\",\n  amber: \"bg-amber-400\",\n  cyan: \"bg-cyan-400\",\n  lime: \"bg-lime-400\",\n  fuchsia: \"bg-fuchsia-400\",\n  rose: \"bg-rose-400\",\n  sky: \"bg-sky-400\",\n  sunset: \"bg-gradient-to-br from-yellow-300 via-orange-400 to-red-500\",\n  ocean: \"bg-gradient-to-br from-cyan-400 via-blue-500 to-indigo-600\",\n  forest: \"bg-gradient-to-br from-emerald-400 via-green-500 to-teal-600\",\n  galaxy: \"bg-gradient-to-br from-indigo-400 via-purple-500 to-fuchsia-600\",\n  neon: \"bg-lime-400 bg-opacity-90 shadow-md shadow-lime-400\",\n  ember: \"bg-gradient-to-br from-orange-400 via-red-500 to-rose-600\",\n  arctic: \"bg-gradient-to-br from-sky-300 via-cyan-400 to-blue-500\",\n  candy: \"bg-gradient-to-br from-fuchsia-400 via-pink-500 to-rose-500\",\n} as const;\ninterface ButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {}\n\nconst Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ variant=\"blue\", intent, children, className, ...props }, ref) => {\n    const buttonRef = useRef<HTMLButtonElement>(null);\n    const circleRef = useRef<HTMLDivElement>(null);\n    const [circleSize, setCircleSize] = useState<number>(0);\n\n    const updateCircleSize = () => {\n      if (buttonRef.current) {\n        const buttonWidth = buttonRef.current.offsetWidth;\n        const buttonHeight = buttonRef.current.offsetHeight;\n        // Use the larger dimension to ensure circle covers button\n        const maxDimension = Math.max(buttonWidth, buttonHeight);\n        //this 0.8 makes sures that circle is slightly smaller than being twice in size\n        setCircleSize(maxDimension * 0.8);\n      }\n    };\n\n    useEffect(() => {\n      updateCircleSize();\n      // Add resize listener for responsive updates\n      const handleResize = () => {\n        updateCircleSize();\n      };\n      window.addEventListener(\"resize\", handleResize);\n      return () => window.removeEventListener(\"resize\", handleResize);\n    }, [children]);\n\n    useGSAP(() => {\n      // Initialize GSAP timeline for scale animations\n      const circle = circleRef.current;\n      const button = buttonRef.current;\n\n      if (!circle || !button) return;\n\n      // Set up the mousemove handler for direct position updates\n      const updateCirclePosition = (e: MouseEvent) => {\n        if (!circle) return;\n\n        const rect = button.getBoundingClientRect();\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        // Direct DOM manipulation for position (smoother than GSAP for continuous updates)\n\n        circle.style.top = `${y}px`;\n        circle.style.left = `${x}px`;\n      };\n\n      const handleMouseEnter = (e: MouseEvent) => {\n        if (!circle) return;\n\n        // Position the circle before showing it\n        const rect = button.getBoundingClientRect();\n\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n\n        circle.style.top = `${y}px`;\n        circle.style.left = `${x}px`;\n        circle.style.display = \"flex\";\n\n        // Use GSAP only for the scale animation\n        gsap.to(circle, {\n          scale: 1,\n          duration: 0.3,\n          ease: \"power2.out\",\n        });\n      };\n\n      const handleMouseLeave = (e: MouseEvent) => {\n        if (!circle) return;\n        const rect = button.getBoundingClientRect();\n        const x = e.clientX - rect.left;\n        const y = e.clientY - rect.top;\n        // Use GSAP for the scaling out animation\n        gsap.to(circle, {\n          scale: 0,\n          duration: 0.3,\n          ease: \"power2.in\",\n          onComplete: () => {\n            circle.style.display = \"none\";\n            circle.style.top = `${y}px`;\n            circle.style.left = `${x}px`;\n          },\n        });\n      };\n\n      // Attach event listeners\n      button.addEventListener(\"mousemove\", updateCirclePosition);\n      button.addEventListener(\"mouseenter\", handleMouseEnter);\n      button.addEventListener(\"mouseleave\", handleMouseLeave);\n\n      // Clean up\n      return () => {\n        button.removeEventListener(\"mousemove\", updateCirclePosition);\n        button.removeEventListener(\"mouseenter\", handleMouseEnter);\n        button.removeEventListener(\"mouseleave\", handleMouseLeave);\n      };\n    }, [circleSize]);\n\n    return (\n      <button\n        ref={(node) => {\n          if (buttonRef && node) {\n            (buttonRef as React.MutableRefObject<HTMLButtonElement>).current =\n              node;\n          }\n          if (typeof ref === \"function\") ref(node);\n          else if (ref) ref.current = node;\n        }}\n        type=\"button\"\n        className={cn(buttonVariants({ className, variant, intent }))}\n        {...props}\n      >\n        <div\n          ref={circleRef}\n          className={cn(\n            \"z-0 circle absolute hidden top-0 left-0 pointer-events-none rounded-full \",\n            variantToColorClass[variant || \"blue\"]\n          )}\n          style={{\n            width: `${2 * circleSize}px`,\n            height: `${2 * circleSize}px`,\n            transform: \"translate(-50%, -50%) scale(0)\",\n          }}\n        />\n        <div className=\"z-20 whitespace-nowrap\">{children}</div>\n      </button>\n    );\n  }\n);\n\nButton.displayName = \"Button\";\nexport default Button;\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}