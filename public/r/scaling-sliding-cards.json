{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "scaling-sliding-cards",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/scaling-sliding-cards.tsx",
      "content": "\"use client\"\n\nimport React, { useRef, RefObject, useEffect, useState } from \"react\"\nimport gsap from \"gsap\"\nimport ScrollTrigger from \"gsap/ScrollTrigger\"\nimport { cn } from \"@/lib/utils\"\nimport { FaArrowRightLong } from \"react-icons/fa6\"\nimport { useGSAP } from \"@gsap/react\"\ngsap.registerPlugin(ScrollTrigger)\n\ninterface PhotoItem {\n  style: string\n  link: string\n}\n\ninterface ScalingSlidingCardsProps {\n  photos: PhotoItem[]\n  fromXPercent?: number\n  toXPercent?: number\n  triggerStart?: string\n  triggerEnd?: string\n  scrubSpeed?: boolean | number\n  useMarkers?: boolean\n  gap?: number\n  wrapperClassName?: string\n  scrollerRef?: RefObject<HTMLElement>\n}\n\nconst ScalingSlidingCards = ({\n  photos,\n  fromXPercent = 100,\n  toXPercent = 0,\n  triggerStart = \"top center\",\n  triggerEnd = \"bottom top\",\n  scrubSpeed = true,\n  useMarkers = false,\n  gap = 20,\n  wrapperClassName = \"text-white h-screen\",\n  scrollerRef,\n}: ScalingSlidingCardsProps) => {\n  const containerRef = useRef<HTMLDivElement>(null)\n  const groupRef = useRef<HTMLDivElement>(null)\n  // Hold references for each card container.\n  const cardRefs = useRef<HTMLDivElement[]>([])\n  // Save each card's full (target) dimensions when measured.\n  const fullDimensionsRef = useRef<{ width: number; height: number }[]>([])\n  const [percentages, setPercentages] = useState<number[]>(\n    new Array(photos?.length ?? 0).fill(0)\n  )\n  const [dimensions, setDimensions] = useState<\n    { width: number; height: number }[]\n  >(() => (photos ?? []).map(() => ({ width: 0, height: 0 })))\n  const instanceIdRef = useRef<string>(\n    `rotating-text-${Math.random().toString(36).substring(2, 11)}`\n  )\n  const [forceUpdate, setForceUpdate] = useState(false)\n\n  useEffect(() => {\n    console.log(\"from useEffext\")\n\n    if (scrollerRef?.current) {\n      setForceUpdate(!forceUpdate)\n    }\n  }, [])\n  // Attach ref to each container and capture its full dimensions only once.\n  const setCardRef = (el: HTMLDivElement | null, index: number) => {\n    if (el) {\n      cardRefs.current[index] = el\n      // Only measure if we haven't already.\n      if (!fullDimensionsRef.current[index]) {\n        const rect = el.getBoundingClientRect()\n        fullDimensionsRef.current[index] = {\n          width: rect.width,\n          height: rect.height,\n        }\n        // Set initial dimensions to half size.\n        gsap.set(el, { width: rect.width / 2, height: rect.height / 2 })\n        setDimensions((prev) => {\n          const newDims = [...prev]\n          newDims[index] = {\n            width: Math.round(rect.width / 2),\n            height: Math.round(rect.height / 2),\n          }\n          return newDims\n        })\n      }\n    }\n  }\n\n  useGSAP(() => {\n    if (groupRef.current && containerRef.current) {\n      const existingTrigger = ScrollTrigger.getById(instanceIdRef.current)\n      if (existingTrigger) {\n        existingTrigger.kill()\n      }\n      const tl = gsap.timeline({\n        scrollTrigger: {\n          trigger: containerRef.current,\n          start: triggerStart,\n          end: triggerEnd,\n          scrub: scrubSpeed,\n          markers: useMarkers,\n          pin: true,\n          pinSpacing:true,\n          scroller: scrollerRef?.current ?? window,\n          id: instanceIdRef.current,\n        },\n      })\n\n      tl.fromTo(\n        groupRef.current,\n        { xPercent: fromXPercent },\n        { xPercent: toXPercent, ease: \"none\" }\n      )\n\n      // On scroll update, adjust each card's dimensions based on its distance from the viewport center.\n      tl.eventCallback(\"onUpdate\", () => {\n        const newPercentages: number[] = []\n        const newDimensions: { width: number; height: number }[] = []\n\n        cardRefs.current.forEach((card, index) => {\n          const rect = card.getBoundingClientRect()\n          const cardCenter = rect.left + rect.width / 2\n          const viewportCenter = window.innerWidth / 2\n          const distance = Math.abs(cardCenter - viewportCenter)\n          const rawPercent = (1 - distance / viewportCenter) * 100\n          // Clamp percentage between 0 and 100.\n          const clampedPercent = Math.max(Math.min(rawPercent, 100), 0)\n          newPercentages[index] = Math.round(clampedPercent)\n\n          const fullDim = fullDimensionsRef.current[index]\n          if (fullDim) {\n            // Interpolate width/height from half to full size.\n            const newWidth =\n              fullDim.width / 2 + (fullDim.width / 2) * (clampedPercent / 100)\n            const newHeight =\n              fullDim.height / 2 + (fullDim.height / 2) * (clampedPercent / 100)\n            newDimensions[index] = {\n              width: Math.round(newWidth),\n              height: Math.round(newHeight),\n            }\n            gsap.set(card, { width: newWidth, height: newHeight })\n          } else {\n            newDimensions[index] = {\n              width: Math.round(rect.width),\n              height: Math.round(rect.height),\n            }\n          }\n        })\n\n        setPercentages(newPercentages)\n        setDimensions(newDimensions)\n      })\n    }\n  }, [\n    fromXPercent,\n    toXPercent,\n    triggerStart,\n    triggerEnd,\n    scrubSpeed,\n    useMarkers,\n    forceUpdate,\n  ])\n\n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"overflow-hidden  flex justify-center items-start\",\n        wrapperClassName\n      )}\n    >\n      <div\n        ref={groupRef}\n        style={{ gap: `${gap}px` }}\n        className=\"flex justify-center items-start\"\n      >\n        {photos?.map((photo, i) => (\n          <div\n            key={i}\n            ref={(el) => setCardRef(el, i)}\n            className={cn(\"relative  border-red-500\", photo.style)}\n          >\n            {/* The image remains a child element */}\n            <img\n              className={cn(\"object-fill shadow-lg h-full w-full\")}\n              src={photo.link}\n              alt=\"Photo\"\n            />\n            {/* <div className=\"absolute flex flex-col bottom-0 text-white text-lg\">\n              <span>{percentages[i]}%</span>\n              <span>width: {dimensions[i]?.width}px</span>\n              <span>height: {dimensions[i]?.height}px</span>\n            </div> */}\n          </div>\n        ))}\n        <div className=\"relative w-52 h-52 md:w-72 md:h-72 lg:w-80 lg:h-80  flex items-start justify-center overflow-visible\">\n          {/* \"Explore More\" card */}\n          <div className=\"flex flex-col items-center\">\n            <div className=\"w-48 h-48 md:w-60 md:h-60 lg:w-72 lg:h-72 flex items-center p-6 md:p-10 lg:p-14 gap-2 justify-center rounded-full bg-[#202020] shadow-lg cursor-pointer border border-transparent group hover:bg-transparent dark:hover:border-white hover:border-black hover:text-black dark:hover:text-white \">\n              <p className=\"text-xl md:text-2xl lg:text-3xl\">\n                Explore More Unizoy <FaArrowRightLong />\n              </p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport { ScalingSlidingCards }\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}