{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "reveal-text",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/reveal-text.tsx",
      "content": "\"use client\";\n\nimport React, { useRef, useEffect } from \"react\";\nimport { gsap } from \"gsap\";\nimport { cn } from \"@/lib/utils\";\nimport Link from \"next/link\";\n\n\ntype HoverTextProps = {\n  children: React.ReactNode;\n  variant?:\n    | \"black\"\n    | \"gradient0\"\n    | \"gradient1\"\n    | \"gradient2\"\n    | \"gradient3\"\n    | \"gradient4\"\n    | \"gradient5\"\n    | \"gradient6\"\n    | \"gradient7\"\n    | \"gradient8\";\n  className?: string;\n  image?: string;\n  hoverImageClass?: string;\n  href?: string;\n};\n\n\nconst variants = {\n  black: \"text-black\",\n  gradient0:\n    \"bg-gradient-to-r from-gray-400 via-gray-600 to-gray-800 text-transparent bg-clip-text\",\n  gradient1:\n    \"bg-gradient-to-br from-purple-500 to-pink-500 text-transparent bg-clip-text\",\n  gradient2:\n    \"bg-gradient-to-r from-blue-500 via-green-400 to-teal-500 text-transparent bg-clip-text\",\n  gradient3:\n    \"bg-gradient-to-r from-orange-400 via-red-500 to-pink-500 text-transparent bg-clip-text\",\n  gradient4:\n    \"bg-gradient-to-r from-yellow-400 via-red-400 to-pink-500 text-transparent bg-clip-text\",\n  gradient5:\n    \"bg-gradient-to-r from-indigo-500 via-purple-500 to-pink-500 text-transparent bg-clip-text\",\n  gradient6:\n    \"bg-gradient-to-r from-cyan-400 via-blue-500 to-indigo-500 text-transparent bg-clip-text\",\n  gradient7:\n    \"bg-gradient-to-r from-emerald-400 via-green-500 to-lime-500 text-transparent bg-clip-text\",\n  gradient8:\n    \"bg-gradient-to-r from-pink-400 via-rose-500 to-red-500 text-transparent bg-clip-text\",\n};\n\nconst RevealText = ({\n  children,\n  variant = \"black\",\n  className = \"\",\n  image,\n  hoverImageClass,\n  href,\n}: HoverTextProps)  => {\n  const imageRef = useRef<HTMLImageElement>(null);\n  const quickToX = useRef<any>(null); // for smooth x movement\n\n  const handleMouseEnter = () => {\n    if (imageRef.current) {\n      gsap.killTweensOf(imageRef.current);\n  \n      // Create quickToX instance fresh on every hover\n      quickToX.current = gsap.quickTo(imageRef.current, \"x\", {\n        duration: 0.6,\n        // ease: \"power2.out\",\n      });\n  \n      const tl = gsap.timeline();\n      tl.to(imageRef.current, {\n        opacity: 1,\n        scale: 1,\n        duration: 0.7,\n        ease: \"elastic.out(1, 0.75)\",\n      });\n    }\n  };\n  \n  const handleMouseLeave = () => {\n    if (imageRef.current) {\n      gsap.killTweensOf(imageRef.current);\n      gsap.to(imageRef.current, {\n        opacity: 0,\n        scale: 0.5,\n        x: 0,\n        duration: 0.3,\n        ease: \"power3.in\",\n      });\n    }\n  };\n  \n  const handleMouseMove = (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n    if (imageRef.current && quickToX.current) {\n      const rect = e.currentTarget.getBoundingClientRect();\n      const x = e.clientX - rect.left;\n      const offset = ((x - rect.width / 2) / rect.width) * 80;\n      quickToX.current(offset); // real-time smooth move\n    }\n  };\n  \n\n  return (\n    <span\n      className=\"relative inline-block group cursor-pointer\"\n      onMouseEnter={handleMouseEnter}\n      onMouseLeave={handleMouseLeave}\n      onMouseMove={handleMouseMove}\n    >\n      {image && (\n        <img\n          ref={imageRef}\n          src={image}\n          alt=\"hover image\"\n          className={cn(\n            \"absolute left-1/2 top-[-9rem] z-30 aspect-video -translate-x-1/2 min-w-36 h-24 md:min-w-40 md:h-28 lg:min-w-48 lg:h-32 object-fill rounded-xl shadow-lg pointer-events-none opacity-0 border-4 lg:border-[6px] scale-50 border-white\",\n            hoverImageClass\n          )}\n        />\n      )}\n      {\n        href ? (\n          <Link href={href} target=\"_blank\" className={cn(variants[variant], className)}> {children} </Link>\n   \n        ):(\n          <span className={cn(variants[variant], className)}> {children} </span>\n   \n        )\n      }\n      </span>\n  );\n};\nexport {RevealText}",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}