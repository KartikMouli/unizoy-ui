{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "infinite-moving-cards",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/infinite-moving-cards.tsx",
      "content": "\"use client\";\nimport { cn } from \"../lib/utils\";\nimport { useRef } from \"react\";\nimport gsap from \"gsap\";\nimport { useGSAP } from \"@gsap/react\";\n\nexport default function InfiniteMovingCards ({\n  items,\n  direction = \"left\",\n  speed = \"fast\",\n  pauseOnHover = true,\n  className,\n}: {\n  items: {\n    quote: string;\n    name: string;\n    title: string;\n  }[];\n  direction?: \"left\" | \"right\";\n  speed?: \"fast\" | \"normal\" | \"slow\";\n  pauseOnHover?: boolean;\n  className?: string;\n}) {\n  const containerRef = useRef<HTMLDivElement>(null);\n  const scrollerRef = useRef<HTMLUListElement>(null);\n  \n  // Register GSAP with React\n  gsap.registerPlugin(useGSAP);\n  \n  useGSAP(() => {\n    if (!scrollerRef.current) return;\n    \n    // Clone items for seamless looping\n    const scrollerContent = Array.from(scrollerRef.current.children);\n    scrollerContent.forEach((item) => {\n      const duplicatedItem = item.cloneNode(true);\n      scrollerRef.current?.appendChild(duplicatedItem);\n    });\n    \n    // Get dimensions\n    const itemWidth = scrollerContent[0].getBoundingClientRect().width;\n    const totalItemsWidth = itemWidth * scrollerContent.length;\n    \n    // Set animation duration based on speed\n    let duration = 40; // normal speed\n    if (speed === \"fast\") duration = 20;\n    else if (speed === \"slow\") duration = 80;\n    \n    // Create a timeline for the continuous animation\n    const tl = gsap.timeline({\n      repeat: -1, // Infinite repeat\n      defaults: { ease: \"none\" }\n    });\n    \n    if (direction === \"left\") {\n      // Initial position\n      gsap.set(scrollerRef.current, { x: 0 });\n      \n      // Create the main animation\n      tl.to(scrollerRef.current, {\n        x: -totalItemsWidth,\n        duration,\n        onComplete: () => {\n          // Reset the position when the animation completes\n          gsap.set(scrollerRef.current, { x: 0 });\n        }\n      });\n    } else {\n      // Initial position for right direction\n      gsap.set(scrollerRef.current, { x: -totalItemsWidth });\n      \n      // Create the animation for right direction\n      tl.to(scrollerRef.current, {\n        x: 0,\n        duration,\n        onComplete: () => {\n          // Reset the position when the animation completes\n          gsap.set(scrollerRef.current, { x: -totalItemsWidth });\n        }\n      });\n    }\n    \n    // Setup hover pause functionality\n    if (pauseOnHover && containerRef.current) {\n      containerRef.current.addEventListener(\"mouseenter\", () => tl.pause());\n      containerRef.current.addEventListener(\"mouseleave\", () => tl.play());\n    }\n    \n    // Cleanup is handled automatically by useGSAP\n    return () => {\n      tl.kill(); // For extra safety\n    };\n  }, { scope: containerRef, dependencies: [direction, speed, pauseOnHover] });\n  \n  return (\n    <div\n      ref={containerRef}\n      className={cn(\n        \"relative z-20 max-w-7xl overflow-hidden\",\n        \"[mask-image:linear-gradient(to_right,transparent,white_20%,white_80%,transparent)]\",\n        className\n      )}\n    >\n      <ul\n        ref={scrollerRef}\n        className=\"flex w-max min-w-full shrink-0 flex-nowrap gap-4 py-4\"\n        style={{ willChange: \"transform\" }} // Optimization for animations\n      >\n        {items.map((item, idx) => (\n          <li\n            className=\"relative w-[350px] max-w-full shrink-0 rounded-2xl border border-b-0 border-zinc-200 bg-[linear-gradient(180deg,#fafafa,#f5f5f5)] px-8 py-6 md:w-[450px] dark:border-zinc-700 dark:bg-[linear-gradient(180deg,#27272a,#18181b)]\"\n            key={idx}\n          >\n            <blockquote>\n              <div\n                aria-hidden=\"true\"\n                className=\"user-select-none pointer-events-none absolute -top-0.5 -left-0.5 -z-1 h-[calc(100%_+_4px)] w-[calc(100%_+_4px)]\"\n              ></div>\n              <span className=\"relative z-20 text-sm leading-[1.6] font-normal text-neutral-800 dark:text-gray-100\">\n                {item.quote}\n              </span>\n              <div className=\"relative z-20 mt-6 flex flex-row items-center\">\n                <span className=\"flex flex-col gap-1\">\n                  <span className=\"text-sm leading-[1.6] font-normal text-neutral-500 dark:text-gray-400\">\n                    {item.name}\n                  </span>\n                  <span className=\"text-sm leading-[1.6] font-normal text-neutral-500 dark:text-gray-400\">\n                    {item.title}\n                  </span>\n                </span>\n              </div>\n            </blockquote>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}