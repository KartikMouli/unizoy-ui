{
  "$schema": "https://ui.unizoy.com/schema/registry-item.json",
  "name": "product-preview",
  "type": "registry:ui",
  "author": "shadcn (https://ui.unizoy.com)",
  "dependencies": [
    "gsap",
    "@gsap/react"
  ],
  "files": [
    {
      "path": "ui/product-preview.tsx",
      "content": "\"use client\"\nimport { RefObject, useEffect, useRef, useState } from \"react\"\nimport { cn } from \"../lib/utils\"\n\nimport { useGSAP } from \"@gsap/react\"\nimport ScrollTrigger from \"gsap/ScrollTrigger\"\nimport gsap from \"gsap\"\ngsap.registerPlugin(ScrollTrigger)\n\ninterface ProductPreviewProps {\n  className?: string\n  productSrc: string\n  productHeight?: number\n  productWidth?: number\n  scaleFactor?: number\n  rotate?: number\n  length?: number\n  scroller?: RefObject<HTMLElement>\n  start?:string\n  articleTop: {\n    title: {\n      text: string\n      className?: string\n    }\n    description: {\n      text: string\n      className?: string\n    }\n    icon?: React.ReactNode\n  }[]\n  articleBottom: {\n    title: {\n      text: string\n      className?: string\n    }\n    description: {\n      text: string\n      className?: string\n    }\n    icon?: React.ReactNode\n  }[]\n}\n\nexport default function ProductPreview({\n  className,\n  productSrc,\n  productHeight = 298,\n  productWidth = 1250,\n  scaleFactor = 0.1,\n  rotate = 30,\n  scroller,\n  start=\"top top\",\n  articleTop,\n  articleBottom,\n  length = (articleTop.length * 2 - 1) * 50,\n}: ProductPreviewProps) {\n  const mainRef = useRef<HTMLElement>(null)\n  const dividerTopRef = useRef<HTMLSpanElement>(null)\n  const dividerBottomRef = useRef<HTMLSpanElement>(null)\n  const articleTopRef = useRef<HTMLElement>(null)\n  const articleBottomRef = useRef<HTMLElement>(null)\n  const [currentTopIndex, setCurrentTopIndex] = useState(-1)\n  const [currentBottomIndex, setCurrentBottomIndex] = useState(-1)\n  const instanceIdRef = useRef<string>(\n    `rotating-text-${Math.random().toString(36).substring(2, 11)}`\n  )\n const [forceUpdate, setForceUpdate] = useState(false)\n  const handleProgress = (self: ScrollTrigger) => {\n    const direction = self.direction\n    const totalSteps = articleTop.length * 2 - 1\n    const progress = Math.min(Math.max(self.progress, 0), 1) // Clamp between 0 and 1\n    const stepSize = 1 / totalSteps\n    const currentStep = Math.ceil(progress / stepSize)\n\n\n    // Calculate indices based on step\n    if (currentStep === 1) {\n      setCurrentBottomIndex(0)\n      setCurrentTopIndex(0)\n    } else {\n      if (direction === 1) {\n        // Scrolling down\n        const topIndex = Math.floor((currentStep + 1) / 2)\n        const bottomIndex = Math.floor(currentStep / 2)\n        if (currentStep % 2 == 0 && topIndex < articleTop.length) {\n          setCurrentTopIndex(topIndex)\n        } else if (bottomIndex < articleBottom.length) {\n          setCurrentBottomIndex(bottomIndex)\n        }\n      } else {\n        // Scrolling up\n        const topIndex = Math.floor(currentStep / 2)\n        const bottomIndex = Math.floor((currentStep - 1) / 2)\n        if (currentStep % 2 == 0 && topIndex < articleTop.length) {\n          setCurrentTopIndex(Math.max(topIndex, 0))\n        } else if (bottomIndex < articleBottom.length) {\n          setCurrentBottomIndex(Math.max(bottomIndex, 0))\n        }\n      }\n    }\n  }\n  useEffect(()=>{\n      if (scroller?.current) {\n      setForceUpdate(!forceUpdate)\n    }\n  },[])\n  useGSAP(() => {\n    if (mainRef.current) {\n      const existingTrigger = ScrollTrigger.getById(instanceIdRef.current)\n      if (existingTrigger) {\n      existingTrigger.kill()\n    }\n      gsap.timeline({\n        scrollTrigger: {\n          trigger: mainRef.current,\n          start,\n          end: `${length}% top`,\n          scrub: true,\n          scroller: scroller?.current ?? window,\n          pin: true,\n          onUpdate: handleProgress,\n          // markers: true, // Consider disabling in production\n          onLeaveBack: () => {\n            setCurrentBottomIndex(-1)\n            setCurrentTopIndex(-1)\n            const t = gsap.timeline({ duration: 0.1 })\n            t.to(dividerTopRef.current, {\n              scaleX: 0,\n              transformOrigin: \"right\",\n            })\n            t.to(\n              dividerBottomRef.current,\n              {\n                width: \"0%\",\n                opacity: 1,\n              },\n              \"<\"\n            )\n          },\n          onEnter: () => {\n            const t = gsap.timeline({ duration: 0.4 })\n            t.fromTo(\n              dividerTopRef.current,\n              { scaleX: 0, transformOrigin: \"right\" },\n              { scaleX: 1, opacity: 1 }\n            )\n            t.to(\n              dividerBottomRef.current,\n              {\n                width: \"100%\",\n                opacity: 1,\n              },\n              \"<\"\n            )\n          },\n           id: instanceIdRef.current,\n        },\n      })\n    }\n  },[forceUpdate])\n\n  return (\n    <>\n      <main\n        ref={mainRef}\n        className={cn(\n          className,\n          \"w-full h-full bg-black flex justify-center items-center dark:text-white text-white px-3\"\n        )}\n      >\n        <div className=\"relative flex justify-between flex-col w-[80vw] h-[90vh]\">\n          <article\n            key={1}\n            ref={articleTopRef}\n            className=\"mt-10 w-1/2 flex flex-col \"\n          >\n            {currentTopIndex != -1 && (\n              <Translate\n                arr={articleTop}\n                index={currentTopIndex}\n                type={\"icon\"}\n                pos={1}\n              />\n            )}\n            <span\n              ref={dividerTopRef}\n              className=\"mt-6 w-full opacity-0 h-[1px] bg-[#818081] relative transform scale-x-0\"\n            >\n              <span className=\"absolute -right-1 top-0 -translate-y-1/2 -translate-x-1/2 h-2 w-2 rounded-full bg-gray-400\"></span>\n            </span>\n            <div className=\"w-[60%] mr-auto\">\n              {currentTopIndex != -1 && (\n                <Translate\n                  arr={articleTop}\n                  index={currentTopIndex}\n                  type={\"title\"}\n                  pos={1}\n                />\n              )}\n              {currentTopIndex != -1 && (\n                <Translate\n                  arr={articleTop}\n                  index={currentTopIndex}\n                  type={\"description\"}\n                  pos={1}\n                />\n              )}\n            </div>\n          </article>\n          <img\n            src={productSrc}\n            alt=\"error loading image\"\n            height={productHeight * scaleFactor}\n            width={productWidth * scaleFactor}\n            style={{ rotate: `${rotate}deg`, transformOrigin: \"top\" }}\n            className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2\"\n          />\n          <article\n            key={2}\n            ref={articleBottomRef}\n            className=\"ml-auto mb-10 w-1/2 flex flex-col \"\n          >\n            {currentBottomIndex != -1 && (\n              <Translate\n                arr={articleBottom}\n                index={currentBottomIndex}\n                type={\"icon\"}\n                pos={2}\n              />\n            )}\n            <span\n              ref={dividerBottomRef}\n              className=\"mt-10  w-0 opacity-0 h-[1px] bg-[#818081] relative\"\n            >\n              <span className=\"absolute left-0 top-0 -translate-y-1/2 -translate-x-1/2 h-2 w-2 rounded-full bg-gray-400\"></span>\n            </span>\n            <div className=\"w-[60%] ml-auto\">\n              {currentBottomIndex != -1 && (\n                <Translate\n                  arr={articleBottom}\n                  index={currentBottomIndex}\n                  type={\"title\"}\n                  pos={2}\n                />\n              )}\n              {currentBottomIndex != -1 && (\n                <Translate\n                  arr={articleBottom}\n                  index={currentBottomIndex}\n                  type={\"description\"}\n                  pos={2}\n                />\n              )}\n            </div>\n          </article>\n        </div>\n      </main>\n    </>\n  )\n}\n\ninterface TranslateProps {\n  arr: ProductPreviewProps[\"articleTop\"]\n  index: number\n  type: keyof TranslateProps[\"arr\"][number]\n  pos: 1 | 2\n}\n\nconst Translate: React.FC<TranslateProps> = ({ arr, index, type, pos }) => {\n  const previousIndex = useRef<number | null>(null)\n  const translateRef = useRef(null)\n  const contentRef = useRef<HTMLDivElement>(null)\n  const safeIndex = Math.max(index, 0) // Ensure index is non-negative\n\n  const direction =\n    previousIndex.current && safeIndex < previousIndex.current\n      ? \"backward\"\n      : \"forward\"\n\n  \n\n  useGSAP(() => {\n    if (!contentRef.current) return\n    const height = contentRef.current.offsetHeight\n    const ease = \"power2.inOut\"\n\n    if (direction === \"forward\") {\n      gsap.fromTo(\n        contentRef.current,\n        { y: height, opacity: 0 },\n        { y: 0, opacity: 1, duration: 0.5, ease }\n      )\n    } else if (direction === \"backward\") {\n      gsap.fromTo(\n        contentRef.current,\n        { y: -height, opacity: 0 },\n        { y: 0, opacity: 1, duration: 0.5, ease }\n      )\n    } else {\n      // Initial animation\n      gsap.fromTo(\n        contentRef.current,\n        { y: height, opacity: 0 },\n        { y: 0, opacity: 1, duration: 0.5, ease }\n      )\n    }\n  }, [index])\n\n  useEffect(() => {\n    previousIndex.current = safeIndex\n  }, [safeIndex])\n\n  if (index < 0) return\n\n  const renderContent = () => {\n    if (safeIndex >= arr.length) return null // Handle overflow\n    switch (type) {\n      case \"title\":\n        return arr[safeIndex].title.text\n      case \"description\":\n        return arr[safeIndex].description.text\n      case \"icon\":\n        return arr[safeIndex].icon\n      default:\n        return null\n    }\n  }\n\n  const getClassName = () => {\n    switch (type) {\n      case \"title\":\n        return cn(\"text-7xl mb-5\", arr[safeIndex].title.className)\n      case \"description\":\n        return cn(\"text-sm\", arr[safeIndex].description.className)\n      case \"icon\":\n        return cn(pos === 1 ? \"py-3\" : \"w-[60%] ml-auto py-3\")\n      default:\n        return \"\"\n    }\n  }\n\n  return (\n    <div ref={translateRef} className=\"overflow-hidden min-h-fit \">\n      <div ref={contentRef} className={getClassName()}>\n        {renderContent()}\n      </div>\n    </div>\n  )\n}\n",
      "type": "registry:ui",
      "target": ""
    }
  ],
  "categories": [
    "hover-effect"
  ]
}